#!/usr/bin/env python
from __future__ import print_function
import numpy as np
import sys
import os
import cv2

import ensure_segmappy_is_installed
from segmappy import Config
from segmappy import Dataset
from segmappy import Generator
from segmappy.tools.classifiertools import get_default_dataset, get_default_preprocessor
from segmappy.tools.roccurve import get_roc_pairs, get_roc_curve
from segmappy.models.model_groups_tf import init_model
from segmappy.tools.heatmap import plot_heatmap_img
from segmappy.tools.heatmap import plot_heatmap_vox

# read config file
configfile = "default_training.ini"

config = Config(configfile)

# add command line arguments to config
import argparse

parser = argparse.ArgumentParser()
parser.add_argument("--log")
parser.add_argument("--debug", action="store_true")
parser.add_argument("--retrain")
parser.add_argument("--checkpoints", type=int, default=1)
parser.add_argument("--keep-best", action="store_true")
parser.add_argument("--roc", action="store_true")
parser.add_argument("--vis_views", action="store_true")
args = parser.parse_args()
config.log_name = args.log
config.debug = args.debug
config.checkpoints = args.checkpoints
config.retrain = args.retrain
config.keep_best = args.keep_best
config.roc = args.roc
config.vis_views = args.vis_views

# create or empty the model folder
if not os.path.exists(config.cnn_model_folder):
    os.makedirs(config.cnn_model_folder)
else:
    import glob

    model_files = glob.glob(os.path.join(config.cnn_model_folder, "*"))
    for model_file in model_files:
        os.remove(model_file)

# load preprocessor
preprocessor = get_default_preprocessor(config)

segments = []
classes = np.array([], dtype=np.int)
n_classes = 0
duplicate_classes = np.array([], dtype=np.int)
max_duplicate_class = 0
duplicate_ids = np.array([], dtype=np.int)
int_paths = []
mask_paths = []
range_paths = []

runs = config.cnn_train_folders.split(",")
for run in runs:
    dataset = get_default_dataset(config, run)

    [run_segments, _, run_classes, run_n_classes, _, _, _, run_int_paths, run_mask_paths,
     run_range_paths] = dataset.load(preprocessor=preprocessor)
    run_duplicate_classes = dataset.duplicate_classes
    run_duplicate_ids = dataset.duplicate_ids

    run_classes += n_classes
    run_duplicate_classes += max_duplicate_class

    segments += run_segments
    classes = np.concatenate((classes, run_classes), axis=0)
    n_classes += run_n_classes
    duplicate_classes = np.concatenate(
        (duplicate_classes, run_duplicate_classes), axis=0
    )
    duplicate_ids = np.concatenate((duplicate_ids, run_duplicate_ids), axis=0)
    int_paths += run_int_paths
    mask_paths += run_mask_paths
    range_paths += run_range_paths

    max_duplicate_class = np.max(duplicate_classes) + 1

if config.debug:
    import json

    # empty or create the debug folder
    if os.path.isdir(config.debug_path):
        import glob

        debug_files = glob.glob(os.path.join(config.debug_path, "*.json"))
        for debug_file in debug_files:
            os.remove(debug_file)
    else:
        os.makedirs(config.debug_path)

    # store loss information
    epoch_log = []
    train_loss_log = []
    train_loss_c_log = []
    train_loss_r_log = []
    train_accuracy_log = []
    test_loss_log = []
    test_loss_c_log = []
    test_loss_r_log = []
    test_accuracy_log = []

    # store segment centers for the current run
    centers = []
    for cls in range(n_classes):
        class_ids = np.where(classes == cls)[0]
        last_id = class_ids[np.argmax(duplicate_ids[class_ids])]
        centers.append(np.mean(segments[last_id], axis=0).tolist())

    with open(os.path.join(config.debug_path, "centers.json"), "w") as fp:
        json.dump(centers, fp)

    # info for sequence prediction visualization
    pred = [0] * (np.max(duplicate_classes) + 1)
    duplicate_ids_norm = np.zeros(duplicate_ids.shape, dtype=np.int)
    for duplicate_class in np.unique(duplicate_classes):
        segment_ids = np.where(duplicate_classes == duplicate_class)[0]
        pred[duplicate_class] = [None] * segment_ids.size

        for i, segment_id in enumerate(segment_ids):
            duplicate_ids_norm[segment_id] = i

    def debug_write_pred(segment_id, segment_probs, train):
        top5_classes = np.argsort(segment_probs)[::-1]
        top5_classes = top5_classes[:5]
        top5_prob = segment_probs[top5_classes]

        segment_class = classes[segment_id]
        segment_prob = segment_probs[segment_class]

        info = [
            int(train),
            int(segment_class),
            float(segment_prob),
            top5_classes.tolist(),
            top5_prob.tolist(),
        ]

        duplicate_class = duplicate_classes[segment_id]
        duplicate_id = duplicate_ids_norm[segment_id]

        pred[duplicate_class][duplicate_id] = info


# load dataset for calculating roc
if config.roc:
    # get test dataset
    roc_preprocessor = get_default_preprocessor(config)

    roc_dataset = Dataset(
        folder=config.cnn_test_folder,
        base_dir=config.base_dir,
        keep_match_thresh=0.7,
        require_change=0.1,
        require_relevance=0.05,
    )

    [roc_segments, roc_positions, roc_classes, roc_n_classes, roc_features, _, _, roc_int_paths, roc_mask_paths,
     roc_range_paths] = roc_dataset.load(
            preprocessor=roc_preprocessor
    )

    roc_duplicate_classes = roc_dataset.duplicate_classes

    # get roc positive and negative pairs
    pair_ids, pair_labels = get_roc_pairs(
        roc_segments, roc_classes, roc_duplicate_classes
    )

    roc_ids = np.unique(pair_ids)
    roc_segments = [roc_segments[roc_id] for roc_id in roc_ids]
    roc_classes = roc_classes[roc_ids]
    roc_positions = roc_positions[roc_ids]

    for i, roc_id in enumerate(roc_ids):
        pair_ids[pair_ids == roc_id] = i

    roc_preprocessor.init_segments(roc_segments,
                                   roc_classes,
                                   positions=roc_positions,
                                   int_paths=roc_int_paths,
                                   mask_paths=roc_mask_paths,
                                   range_paths=roc_range_paths
                                   )

    # roc generator
    gen_roc = Generator(
        roc_preprocessor,
        range(len(roc_segments)),
        roc_n_classes,
        train=False,
        batch_size=config.batch_size,
        shuffle=False,
    )

# split so that the test set contains entire sequences
train_fold = np.ones(classes.shape, dtype=np.int)
for c in np.unique(classes):
    dup_classes = duplicate_classes[classes == c]
    unique_dup_classes = np.unique(dup_classes)

    # choose for train the sequence with the largest last segment
    dup_sizes = []
    for dup_class in unique_dup_classes:
        dup_ids = np.where(dup_class == duplicate_classes)[0]
        last_id = np.max(dup_ids)
        dup_sizes.append(segments[last_id].shape[0])

    dup_keep = np.argmax(dup_sizes)

    # randomly distribute the others
    for i, dup_class in enumerate(unique_dup_classes):
        if i != dup_keep:
            if np.random.random() < config.test_size:
                train_fold[duplicate_classes == dup_class] = 0

train_ids = np.where(train_fold == 1)[0]
test_ids = np.where(train_fold == 0)[0]

# initialize preprocessor
preprocessor.init_segments(segments,
                           classes,
                           train_ids=train_ids,
                           int_paths=int_paths,
                           mask_paths=mask_paths,
                           range_paths=range_paths)

# save scaler mean in a csv
if config.remove_mean:
    scaler_path = os.path.join(config.cnn_model_folder, "scaler_mean.csv")
    with open(scaler_path, "w") as fp:
        for i in preprocessor._scaler.mean_:
            fp.write(str(i) + "\n")

# save the scaler as well using pickle
if config.remove_mean or config.remove_std:
    scaler_path = os.path.join(config.cnn_model_folder, "scaler.pkl")
    preprocessor.save_scaler(scaler_path)

# initialize segment batch generators
gen_train = Generator(
    preprocessor,
    train_ids,
    n_classes,
    train=True,
    batch_size=config.batch_size,
    shuffle=True,
)
gen_test = Generator(
    preprocessor,
    test_ids,
    n_classes,
    train=False,
    batch_size=config.batch_size,
    shuffle=True,
)

print("Training with %d segments" % gen_train.n_segments)
print("Testing with %d segments" % gen_test.n_segments)

import tensorflow as tf

tf.reset_default_graph()

if config.retrain:
    # restore variable names from previous session
    saver = tf.train.import_meta_graph(config.retrain + ".meta")
else:
    # define a new model
    init_model(tuple(preprocessor.voxels), (64, 1024), n_classes, vis_views=config.vis_views)

    # model saver
    saver = tf.train.Saver(max_to_keep=config.checkpoints)

# get key tensorflow variables
cnn_graph = tf.get_default_graph()

cnn_input = cnn_graph.get_tensor_by_name("InputScope/input:0")
cnn_input_vis = cnn_graph.get_tensor_by_name("InputScope/input_vis:0")
y_true = cnn_graph.get_tensor_by_name("y_true:0")
training = cnn_graph.get_tensor_by_name("training:0")
scales = cnn_graph.get_tensor_by_name("scales:0")

loss = cnn_graph.get_tensor_by_name("loss:0")
loss_c = cnn_graph.get_tensor_by_name("loss_c:0")
loss_r = cnn_graph.get_tensor_by_name("loss_r:0")

accuracy = cnn_graph.get_tensor_by_name("accuracy:0")
y_prob = cnn_graph.get_tensor_by_name("y_prob:0")
descriptor = cnn_graph.get_tensor_by_name("OutputScope/descriptor_read:0")
roc_auc = cnn_graph.get_tensor_by_name("roc_auc:0")

#visualization
conv = cnn_graph.get_tensor_by_name("conv3_out:0")
conv_vis = cnn_graph.get_tensor_by_name("conv5_vis_out:0")
conv_vis_grad = cnn_graph.get_tensor_by_name("conv5_vis_grad_out:0")
img_heatmap = cnn_graph.get_tensor_by_name("img_heatmap:0")
img_heatmap_vis = cnn_graph.get_tensor_by_name("img_heatmap_vis:0")
score = cnn_graph.get_tensor_by_name("score:0")
score_vis = cnn_graph.get_tensor_by_name("score_vis:0")

global_step = cnn_graph.get_tensor_by_name("global_step:0")
update_step = cnn_graph.get_tensor_by_name("update_step:0")
train_op = cnn_graph.get_operation_by_name("train_op")

summary_batch = tf.summary.merge_all("summary_batch")
summary_epoch = tf.summary.merge_all("summary_epoch")
summary_heatmap = tf.summary.merge_all("summary_heatmap")
summary_heatmap_vis = tf.summary.merge_all("summary_heatmap_vis")

# os.environ['CUDA_VISIBLE_DEVICES'] = "1"

config_tf = tf.ConfigProto()
config_tf.gpu_options.allow_growth = True

with tf.Session(config=config_tf) as sess:
    # tensorboard statistics
    if config.log_name:
        train_writer = tf.summary.FileWriter(
            os.path.join(config.log_path, config.log_name, "train"), sess.graph
        )
        test_writer = tf.summary.FileWriter(
            os.path.join(config.log_path, config.log_name, "test")
        )

    # initialize all tf variables
    tf.global_variables_initializer().run()

    if config.retrain:
        saver.restore(sess, config.retrain)

    # remember best epoch accuracy
    if config.keep_best:
        best_accuracy = 0

    # sequence of train and test batches
    batches = np.array([1] * gen_train.n_batches + [0] * gen_test.n_batches)
    for epoch in range(0, config.n_epochs):
        train_loss = 0
        train_loss_c = 0
        train_loss_r = 0
        train_accuracy = 0
        train_step = 0

        test_loss = 0
        test_loss_c = 0
        test_loss_r = 0
        test_accuracy = 0
        test_step = 0

        np.random.shuffle(batches)

        console_output_size = 0
        for step, train in enumerate(batches):
            if train:
                batch_segments, batch_classes, batch_vis_views = gen_train.next()

                # run_options = tf.RunOptions(trace_level=tf.RunOptions.FULL_TRACE)
                # run_options = tf.RunOptions()
                # run_metadata = tf.RunMetadata()
                # run optimizer and calculate loss and accuracy
                summary, batch_loss, batch_loss_c, batch_loss_r, batch_accuracy, batch_prob, _ = sess.run(
                    [summary_batch, loss, loss_c, loss_r, accuracy, y_prob, train_op],
                    feed_dict={
                        cnn_input: batch_segments,
                        cnn_input_vis: batch_vis_views,
                        y_true: batch_classes,
                        training: True,
                        scales: preprocessor.last_scales,
                    },
                    # options=run_options,
                    # run_metadata=run_metadata
                )

                if config.debug:
                    for i, segment_id in enumerate(gen_train.batch_ids):
                        debug_write_pred(segment_id, batch_prob[i], train)

                if config.log_name:
                    # train_writer.add_run_metadata(run_metadata, 'run_%d' % step, step)
                    train_writer.add_summary(summary, sess.run(global_step))

                train_loss += batch_loss
                train_loss_c += batch_loss_c
                train_loss_r += batch_loss_r
                train_accuracy += batch_accuracy
                train_step += 1
            else:
                batch_segments, batch_classes, batch_vis_views = gen_test.next()

                # calculate test loss and accuracy
                [summary, batch_loss, batch_loss_c, batch_loss_r,
                 batch_accuracy, batch_prob, batch_conv, batch_conv_vis, batch_descriptor] = sess.run(
                    [summary_batch, loss, loss_c, loss_r, accuracy, y_prob, conv, conv_vis, descriptor],
                    feed_dict={
                        cnn_input: batch_segments,
                        cnn_input_vis: batch_vis_views,
                        y_true: batch_classes,
                        scales: preprocessor.last_scales,
                    },
                )

                if config.debug:
                    for i, segment_id in enumerate(gen_test.batch_ids):
                        debug_write_pred(segment_id, batch_prob[i], train)

                if config.log_name:
                    test_writer.add_summary(summary, sess.run(global_step))

                if test_step == gen_test.n_batches - 1:
                # if True:
                    img_heatmap_vis_np, scores_vis = plot_heatmap_img(batch_segments,
                                                      batch_vis_views,
                                                      batch_classes,
                                                      preprocessor.last_scales,
                                                      batch_conv_vis,
                                                      batch_descriptor,
                                                      sess,
                                                      descriptor,
                                                      cnn_input,
                                                      cnn_input_vis,
                                                      y_true,
                                                      scales)

                    # img_heatmap_np, scores = plot_heatmap_vox(batch_segments,
                    #                                   batch_vis_views,
                    #                                   batch_classes,
                    #                                   preprocessor.last_scales,
                    #                                   batch_conv,
                    #                                   batch_descriptor,
                    #                                   sess,
                    #                                   descriptor,
                    #                                   cnn_input,
                    #                                   cnn_input_vis,
                    #                                   y_true,
                    #                                   scales,
                    #                                   480, 640)

                    # summary = sess.run(summary_heatmap, feed_dict={img_heatmap_vis: img_heatmap_vis_np,
                    #                                                img_heatmap: img_heatmap_np,
                    #                                                score: scores,
                    #                                                score_vis: scores_vis})
                    summary = sess.run(summary_heatmap_vis, feed_dict={img_heatmap_vis: img_heatmap_vis_np,
                                                                       score_vis: scores_vis})
                    test_writer.add_summary(summary, sess.run(global_step))
                    test_writer.flush()

                test_loss += batch_loss
                test_loss_c += batch_loss_c
                test_loss_r += batch_loss_r
                test_accuracy += batch_accuracy
                test_step += 1

            # update training step
            sess.run(update_step)

            # print results
            sys.stdout.write("\b" * console_output_size)

            console_output = "epoch %2d, step %05d " % (epoch, step)

            if train_step:
                console_output += "loss %.4f acc %.2f c %.4f r %.4f " % (
                    train_loss / train_step,
                    train_accuracy / train_step * 100,
                    train_loss_c / train_step,
                    train_loss_r / train_step,
                )

            if test_step:
                console_output += "v_loss %.4f v_acc %.2f v_c %.4f v_r %.4f" % (
                    test_loss / test_step,
                    test_accuracy / test_step * 100,
                    test_loss_c / test_step,
                    test_loss_r / test_step,
                )

            console_output_size = len(console_output)

            sys.stdout.write(console_output)
            sys.stdout.flush()

        # dump prediction values and loss
        if config.debug:
            epoch_debug_file = os.path.join(config.debug_path, "%d.json" % epoch)
            with open(epoch_debug_file, "w") as fp:
                json.dump(pred, fp)

            epoch_log.append(epoch)
            train_loss_log.append(train_loss / train_step)
            train_loss_c_log.append(train_loss_c / train_step)
            train_loss_r_log.append(train_loss_r / train_step)
            train_accuracy_log.append(train_accuracy / train_step * 100)
            test_loss_log.append(test_loss / test_step)
            test_loss_c_log.append(test_loss_c / test_step)
            test_loss_r_log.append(test_loss_r / test_step)
            test_accuracy_log.append(test_accuracy / test_step * 100)

            with open(os.path.join(config.debug_path, "loss.json"), "w") as fp:
                json.dump(
                    {
                        "epoch": epoch_log,
                        "train_loss": train_loss_log,
                        "train_loss_c": train_loss_c_log,
                        "train_loss_r": train_loss_r_log,
                        "train_accuracy": train_accuracy_log,
                        "test_loss": test_loss_log,
                        "test_loss_c": test_loss_c_log,
                        "test_loss_r": test_loss_r_log,
                        "test_accuracy": test_accuracy_log,
                    },
                    fp,
                )

        # calculate roc
        if config.roc:
            cnn_features = []
            for batch in range(gen_roc.n_batches):
                batch_segments, _, batch_vis_views = gen_roc.next()

                batch_descriptors = sess.run(
                    descriptor,
                    feed_dict={
                        cnn_input: batch_segments,
                        cnn_input_vis: batch_vis_views,
                        scales: roc_preprocessor.last_scales,
                    },
                )

                for batch_descriptor in batch_descriptors:
                    cnn_features.append(batch_descriptor)

            cnn_features = np.array(cnn_features)

            _, _, epoch_roc_auc = get_roc_curve(cnn_features, pair_ids, pair_labels)

            summary = sess.run(summary_epoch, feed_dict={roc_auc: epoch_roc_auc})
            test_writer.add_summary(summary, sess.run(global_step))

            sys.stdout.write(" roc: %.3f" % epoch_roc_auc)

        # flush tensorboard log
        if config.log_name:
            train_writer.flush()
            test_writer.flush()

        # save epoch model
        if not config.keep_best or test_accuracy > best_accuracy:
            if config.checkpoints > 1:
                model_name = "model-%d.ckpt" % sess.run(global_step)
            else:
                model_name = "model.ckpt"

            if config.vis_views:
                model_folder = config.cnn_model_folder_w_vis_views
            else:
                model_folder = config.cnn_model_folder_wo_vis_views
            saver.save(sess, os.path.join(model_folder, model_name))
            tf.train.write_graph(
                sess.graph.as_graph_def(), model_folder, "graph.pb"
            )

        print()
